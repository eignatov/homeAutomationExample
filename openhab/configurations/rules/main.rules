// IterableExtensions http://download.eclipse.org/modeling/tmf/xtext/javadoc/2.7/org/eclipse/xtext/xbase/lib/IterableExtensions.html

val Hysteresis = 0.3
//val Heating_Setpoint_Min_Value = 5
//val Heating_Setpoint_Max_Value = 28
//val Heating_Setpoint_Def_Value = 23

var Number setpoint_value = 23

rule "Initialize Heating States" 
  when 
    System started
  then
    logInfo("Initialize heating states", "Rule executed")
    logInfo("Initialize heating states", Heating_Setpoint.state.toString())

    if( Heating_Setpoint.state == Uninitialized ) {
      postUpdate(Heating_Setpoint, setpoint_value)
      logInfo("Initialize heating states", "Heating_Setpoint Uninitialized")
      logInfo("Initialize heating states, Heating_Setpoint set to ", setpoint_value.toString())
    }

    if( Heating_Switch.state == Uninitialized ) {
      Heating_Switch.sendCommand(OFF)
      logInfo("Initialize heating states", "Heating_Switch Uninitialized")
      logInfo("Initialize heating states, Heating_Switch set to", "OFF")
    }
end

rule "Smart Switch Rule"
  when
    Item Smart_Switch_1 changed
  then
    var turned_on = Lights?.members.filter( item| item.state == ON )

    logInfo("Smart Switch Rule, turned_on =  ", turned_on.toString())

    if (turned_on.isEmpty)
    {
      Leds?.members.forEach( item| sendCommand(item, ON) )
    } else
    {
      turned_on.forEach( item| sendCommand(item, OFF) )
    }
end


